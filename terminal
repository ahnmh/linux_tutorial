ls(list)
 ls -F /
 : 루트 디렉토리의 숨김 파일 표시, 파일 종류 표시
 : / = 디렉토리, @ = 파일, * = 실행 파일
 ls ~
 : 홈 디렉토리를 출력
 ls -R
 : 하위 디렉토리 목록까지 출력함.
 ls -l
 : 파일의 상세 목록까지 출력(심볼릭 링크의 실제 위치도 출력된다)
 : 출력 결과의 의미
   drwxr-xr-x   2 root root  4096  2월  6 00:18 bin/
   d = 파일의 종류(d = directory, l = symbolic link, - = 파일(실행파일, 일반파일)
   rwxr-xr-x = 파일접근권한. 파일 소유자/그룹/기타 사용자가 파일을 읽고 쓰고 수정하고 실행할 수 있는 권한이 
    어떻게 부여되는지 보여줌
   2 = 하드 링크의 갯수
   root = 파일 소유자
   4096 = 파일 크기
   2월 6 00:18 = 마지막으로 수정한 날짜
 ls -aF
 : a 옵션과 F 옵션을 동시에 적용
 ls -ld
 : 디렉토리 자체의 정보를 확인함.(ls -l은 현재 디렉토리 아래에 있는 모든 파일들애 대해 출력하므로,
   현재 디렉토리 정보를 보려면 d옵션을 사용함.
 ls *
 : 현재 디렉토리의 모든 파일과 서브 디렉토리, 서브 디렉토리 파일을 나열해줌.
 ls -l Do*
 : Do로 시작하는 모든 파일을 나열함.
 ll = ls -aFl

dir
 : Windows의 dir과 동일하다. 즉 ls이다.(쓰지 말자..)

pwd(print working directory)
 : 현재 디렉토리 위치를 출력함.


mkdir(Make Directory)
 : 기본적으로 해당 계정의 홈 디렉토리에 만들 수 있다.
 : 또는 누구에게나 쓰기 권한이 있는 디렉토리에도 만들 수 있다(/tmp)
 mkdir -p myd/test
 : myd 아래에 test까지 만든다.
 mkdir test1 test2 test3
 : 여러 개의 디렉토리를 동시에 만든다.

rmdir(Remove Directory)
 : 디렉토리 삭제
 : 삭제할 때는 기본적으로 해당 디렉토리가 비어 있어야 한다.(그렇지 않은 경우 rm -r <directory> 를 사용해야 함)

cat(Concatenate)
 cat -n <file>
 : 행 번호를 붙여서 텍스트 파일을 출력한다.

more
 : 내용이 긴 경우 페이지를 넘겨가면서 볼 수 있다.
 : Space를 누르면 페이지 단위로 넘어가고 Enter를 누르면 한줄씩 넘어감.


less
 : more처럼 페이지를 넘겨가면서 볼 수 있는데, more와는 달리 이전 페이지도 볼 수 있다.
 : 명령어
   j = 한줄씩 다음행으로 넘어감
   k = 한줄씩 이전행으로 넘어감
   Space = 다음 페이지로 넘어감
   Ctrl + b = 이전 페이지로 넘어감
   /<키워드> = 키워드에 해당하는 단어를 찾는다. 다음 <키워드>를 찾으려면 n을 입력한다.
   q = less 명령을 종료함

tail
 tail -10 <file>
 : 파일 뒤에서부터 10줄을 출력한다.
 tail -f <file>
 : 파일의 뒤에서부터 주기적으로 출력한다. tail 명령이 무한반복되므로 Ctrl + C로 중단해야 한다.

cp(Copy)
 cp <file1> <file2>
 : file1을 file2의 이름으로 복사함
 cp <file1> <directory1>
 : file1을 directory1로 복사함
 cp <file1> <file2> <file3> <directory1>
 : file1, file2, file3을 directory1로 복사함
 cp -r <directory1> <directory2>
 : directory1을 directory2로 복사한다
 cp -i <file1> <file2>
 : -i를 지정하면 이미 존재하는 경우 overwrite할것인지 물어본다. 없으면 그냥 overwrite를 수행함.
 cp * /tmp
 : 현재 폴더의 모든 내용을 tmp 디렉토리로 복사함.
 cp *.c /tmp
 : 현재 폴더의 확장자가 c인 모든 파일을 tmp 디렉토리로 복사함...

mv(Move)
 mv <file1> <file2>
 : file1을 file2의 이름으로 이동함
 mv <file1> <directory1>
 : file1을 directory1로 이동함
 mv <file1> <file2> <file3> <directory1>
 : file1, file2, file3을 directory1로 이동함
 mv <directory1> <directory2>
 : directory1을 directory2로 이동한다(cp와는 다르게 -r이 필요없다)
 mv -i <file1> <file2>
 : -i를 지정하면 이미 존재하는 경우 overwrite할것인지 물어본다. 없으면 그냥 overwrite를 수행함.

rm(Remove)
 rm <file>
 rm -r <directory>
 : 디렉토리를 삭제한다
 rm -i <file>
 : 삭제하기 전에 물어본다.
 rm <directory>/* 
 : 디렉토리 아래의 모든 파일을 삭제한다.

* 파일 링크
 기존에 있는 파일에 새로운 파일명을 붙이는 것
 복잡한 디렉토리 계층 구조를 포함하여 파일명이 복잡한 경우, 짧게 줄인 다른 이름을 붙여서 간단히 사용할 수 있다.
 - 하드 링크 : 기존 파일에 새로운 파일명을 추가로 생성하는 것
 - 심볼릭 링크 : 원본 파일을 가르키는 새로운 파일을 만드는 것(윈도우의 바로 가기와 동일)
 링크가 변경되거나 원본이 변경되면 서로 반영된다.

* 리눅스의 파일 구성
 파일은 "파일명 + inode( + 데이터 블록 주소) -> 실제 데이터 블록"으로 구성된다.
 - inode : 파일에 관한 정보를 가지고 있는 특별한 구조체. 외부적으로는 번호로 표시되고
            내부적으로는 파일의 종류 / 크기 / 소유자 / 파일 변경 시간 / 파일명 등 파일 상세 정보와 데이터 블록의 주소로 구성됨.
           ls -l 명령으로 출력되는 정보가 바로 이 정보임.
            파일의 inode 번호는 ls -i로 알 수 있다.


ln(link)
 ln <file> <hardlink>
 : 파일의 하드링크를 만든다.
 : ls -l로 출력해보면 완전히 새로운 파일 같지만, ls -i로 출력해보면 inode 번호가 같음을 알 수 있다.(inode가 같은 점에서 이는 복사와는 다르다.)
 : 그리고 원본 파일과 하드링크 파일의 링크 갯수는 2가 됨을 알 수 있다.
 ln -s <file> <hardlink>
 : 심볼릭 링크의 경우 inode 번호가 다르다. 따라서 별개의 파일이다.
 : 파일 종류가 l로 표시된다.(하드링크의 경우 원본 파일과 동일함)
 : ls -l로 출력한 경우 심볼링 링크 -> 실제 파일 의 형태로 표시된다.
 : 하드 링크의 갯수가 추가되지 않는다.
 : 심볼릭 링크의 장점
  - 하드 링크는 디렉토리에는 생성할 수 없고 다른 파일 시스템에 생성할 수 없지만, 심볼릭 링크는 디렉토리를 대상으로도 생성이 가능하다.


touch
 : 빈 파일을 하나 생성한다.

grep
 grep <pattern> <file>
 : 파일에서 패턴에 해당하는 문자열을 검색하여 모두 출력한다.
 grep -n <pattern> <file>
 : 행번호를 출력한다.
 grep -l <pattern> <file> <file2> <file3> ...
 : 패턴을 포함하는 파일 이름을 출력한다.
 grep -i <pattern> <file>
 : 대소문자를 모두 검색함.

find
 find <path> <condition> <action>
 : path에 해당하는 경로에서 condition 조건으로 검색된 파일에 대해 action을 수행함.
 find ~ -name cmd
 : 홈디렉토리에서 이름이 cmd인 파일을 찾는다.
 find ~ -name cmd -ls
 : 홈디렉토리에서 이름이 cmd인 파일을 찾아서 자세한 형식으로 출력한다.
 find ~ -type d
 : 홈디렉토리에서 파일 타입이 디렉토리인 것을 찾는다.
 find ~ -user ahnmh
 : 홈디렉토리에서 파일의 소유자가 ahnmh인 파일을 찾는다.
 find ~ -name cmd -exec vi{} \;
 : 홈디렉토리에서 이름이 cmd인 파일을 찾아서 vi를 실행하여 연다.
 find ~ -name cmd -ok vi{} \;
 : 홈디렉토리에서 이름이 cmd인 파일을 찾아서 vi를 실행하여 연다. 실행하기 전에 물어본다.

whereis
 whereis <command>
 : 정해진 디렉토리를 검색하여 명령의 위치를 찾는다.
 : 검색 디렉토리는 man whereis 를 통해서 알 수 있다(/bin, /usr/bin, /etc, /usr/etc, /sbin, /usr/sbin, /usr/share/man 등)

which
 which <command>
 : 에일리어스나 PATH환경 변수로 지정된 경로에서 파일을 찾는다.
 : 사용자 초기화 파일에 지정된 에일리어스를 먼저 찾아보므로 에일리어스가 지정된 명령의 경우에는 해당 에일리어스가 출력된다.
 : 에일리어스가 없으면 PATH환경 변수에 지정된 경로를 순서대로 찾아가며 명령어 파일이 있는지 검색한다.

tar
압축 풀기
tar -xvf test.tar
압축 하기
tar -cvf test.tar

gzip
압축 풀기
gzip -d test.tar.gz
압축 하기
gzip test.tar


이클립스 설치
 - 이클립스 다운로드 페이지에서 설치 패키지 받은 후에 만일 jre가 없다고 실행이 안되면 default-jre/default-jdk를 설치해주면 된다.
 - 이후 sudo apt-get install build-essential 을 설치해서 g++을 설치해줌.

.vim.rc 내용
set number
set autoindent
set cindent
set title
syntax on
set ts=8
set sw=4
set sts=4

폰트 바꾸려면 unity 다운로드 받아야 함

file
지정한 파일의 속성을 확인함.

    
쉘 명령
 - : 이전 작업 디렉토리를 나타냄.
 ; : 명령을 차례대로 실행함.
    date;ls;pwd
 | : 왼쪽 명령의 실행 결과를 오른쪽 명령의 입력으로 전달함.
    ls -al | more
 '' : 모든 특수 문자를 일반 문자로 처리함
 "" : $, ``, \을 제외한 모든 특수문자를 일반 문자로 처리함.
ahnmh@ahnmh-amor2:~$ echo $SHELL
/bin/bash
ahnmh@ahnmh-amor2:~$ echo '$SHELL'
$SHELL
ahnmh@ahnmh-amor2:~$ echo "$SHELL"
/bin/bash

 `` : `` 내부의 문자열을 명령으로 해석하여 해당 명령의 실행 결과로 바뀜.
ahnmh@ahnmh-amor2:~$ echo "today is `date`"
today is 2016. 03. 15. (화) 10:01:51 KST

uname -a : 플랫폼 정보 출력
ahnmh@ahnmh-amor2:~$ uname -a
Linux ahnmh-amor2 4.2.0-30-generic #36~14.04.1-Ubuntu SMP Fri Feb 26 18:49:23 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

\ : 해당 특수문자의 효과를 없앤다.
ahnmh@ahnmh-amor2:~$ echo \$SHELL
$SHELL

>, <, >> 입출력의 방향을 지정함.
ls -al > res : res라는 이름의 파일을 생성해서 ls -al 명령 수행 결과를 저장함.

표준 입출력의 파일 디스크립터
표준 입력 : 0
표준 출력 : 1
표준 오류 : 2
표준 입출력을 파일로 바꾸는 것을 리다이렉션이라고 함.

표준 출력 리다이렉션
> : overwrite
>> : 이어쓰기
원래 ls -al 1 > res이다. 즉 표준 출력을 res라는 파일로 바꾸는 것임.

Overwrite 방지
set -o noclobber
set +o noclobber

cat > res = cat 1 > res
일반적으로 cat명령은 파일 내용을 화면으로 출력할 때 사용하는데, 
위와 같은 경우 표준 입출력으로 파일로 저장할 수 있게 됨.

표준 오류 리다이렉션
위에서와 같이 표준 오류의 파일 디스크립터 번호는 2로서 표준 출력인 1과 다르다. 따라서
오류를 리다이렉션 하려면 2>와 같이 사용한다.
ls abc 2> res

메시지 버리기
/dev/null 파일은 버리고 싶은 내용을 담는 장치 파일로 이 파일에 전달된 내용은 복구할 수 없다.


표준 입력 리다이렉션
cat res 는 cat < res와 동일하다.

환경변수, 셸 변수
set : 환경 변수 출력
env : 셸 변수 출력
주요 환경 변수
HOME
LOGNAME
PATH
PWD
SHELL

셸 변수 설정
변수이름=문자열(공백이 있으면 안됨)

환경 변수 설정
export 셸 변수 : 지정한 셸 변수를 환경 변수로 바꾼다
export 변수이름=문자열
환경 변수를 다시 셸 변수로 바꾸기
export -n 변수이름
변수 해제
unset 변수이름


에일리어스
긴 명령을 짧게 줄여서 사용할 수 있도록 저장함
삭제할때마다 물어보게 하려면 rm -i를 사용해야 하는데, 아래와 같이 에일리어스를 저장할 수 있다
alias rm='rm -i'('=' 사이에 공백이 있으면 안된다)
해제
unalias rm

디렉토리를 옮길때마다 현재 디렉토리를 출력해주길 원한다면,
alias cd='cd;pwd'로 가능할까? 불가능하다. cd 명령 다음에 디렉토리 위치를 지정할 수 없기 때문이다.
이 경우 셸 프로그래밍을 통해 해결할 수 있다.(에일리어스가 아님)
ahnmh@ahnmh-amor2:~/Documents$ function cdpwd {
> cd $1;pwd
> }
ahnmh@ahnmh-amor2:~/Documents$ cdpwd /
/
ahnmh@ahnmh-amor2:/$ cdpwd ~/Documents/
/home/ahnmh/Documents


이전에 실행했던 명령 보기
history

이전에 실행했던 명령 재사용하기
!! : 바로 직전에 사용했던 명령
!번호 : 히스토리에서 해당 번호의 명령을 재사용
!문자열 : 히스토리에서 해당 문자열로 시작하는 마지막 명령

터미널에서 로그아웃할 때 배시 셸은 사용자가 입력했던 명령의 목록을 사용자 홈 디렉토리의 .bash_history에 저장한다.


프롬프트 설정
프롬프트 설정은 환경 변수 PS1에 저장되어 있으므로,
PS1의 설정을 변경하면 된다. \로 시작되는 문자는 이스케이프 문자로서 셸에 의해 번역된다.

PS1 변경 
PS1='[`uname -n`:$PWD] '
[ahnmh-amor2:/home/ahnmh/Documents] 

PS1='[`uname -n`:\w \t] '
[ahnmh-amor2:/ 11:05:24] 

이스케이프 문자의 예
\h : host name short ver.
\H : host name long ver.
\n : change line
\s : shell name
\t : 24시간 형식으로 시간을 표시함
\T : 12시간 형식으로 시간을 표시함
\u : username
\w : working directory
\W : last directory name of working directory
\! : 현재 명령의 히스토리 번호

환경 설정 파일
 - 시스템 환경 설정 파일
 : 배시 셸의 시스템 환경 설정 파일은 /etc 디렉토리에 있다.
 : 시스템 환경 설정 파일은 일반 사용자가 수정할 수 없다.
 : 배시 셸의 환경 설정 파일 - /etc/profile, /etc/bash.bashrc -> 업데이트 시 일관성 있는 관리를 위해 수정하지 않는게 좋다.

 - 사용자 환경 설정 파일
 : 사용자의 홈 디렉토리에 숨김 파일로 존재한다.
 : 사용자가 로그인하면 제일 먼저 시스템 환경 설정 파일이 실행되어 시스템 공통 환경을 만들고 이후 사용자 환경 설정 파일을 순서대로 로드한다.
 : ~/.bashrc -> 기본 에일리어스나 함수등을 설정한다.
 : ~/.bash_aliases -> 사용자가 정의한 에일리어스를 별도 파일로 저장한다.
alias eclipse='cd ~/eclipse/cpp-mars/eclipse;sudo ./eclipse'

 : ~/.bash_logout -> 로그아웃 시 실행할 필요가 있는 함수를 설정한다.

.bashrc에 함수 생성하기
function cdpwd {
        cd $1;pwd
}
export -f cdpwd

수정된 사용자 환경 파일 적용하기
. .bashrc 또는 source .bashrc

셸 스크립트 작성 예

#!/bin/bash
echo "Hello, World!"

echo -n "Size of A = "
read A
echo -n "Size of B = "
read B

if [ $A -lt $B ] 
then 
        echo "A is smaller than B"
elif [ $A -eq $B ] 
then
        echo "A is equal B"
else
        echo "A is bigger than B"

fi
let "AVR = ($A + $B) / 2"
echo "Average is $AVR"



chmod 755 test.sh ; 실행권한을 부여하고
./test.sh ; 실행 



프로세스를 이름으로 죽이는 방법(9는 SIGKILL 시그널을 의미함)
sudo killall -9 Hello
* 참조
http://bakyeono.net/post/2015-05-05-linux-kill-process-by-name.html


