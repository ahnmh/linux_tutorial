단축키 모음	"Ctrl + Super + D : 모든 창 닫기
Alt + PrintScreen : 현재 윈도우를 캡쳐한 후 파일로 저장할 것인지 물음
Ctrl + Alt + PrintScreen : 현재 윈도우를 캡쳐한 후 바로 클립보드로 저장함.
Ctrl + Super + Up : 현재 윈도우를 최대 크기로 설정
Ctrl + Super + Down : 현재 윈도우를 이전 크기로 설정, 한번더 누르면 최소 크기로 설정
Ctrl + Alt + S : 현재 윈도우 숨김
Ctrl + F7 : 윈도우 이동
Ctrl + F8 : 윈도우 크기 조정
"
"이클립스
post-build 설정"	"빌드한 프로그램은 다른 위치에 복사하고 싶은 경우(예를 들면 usr/bin/),
C/C++ Build -> Settings -> Post-build steps 에 아래와 같이 설정하면 된다.
cp $(PWD)/<executable file> /usr/bin
 * $(PWD)는 현재 작업 디렉토리를 나타내는 시스템 환경 변수
"
이클립스 단축키	"1. Shift + Alt + z = 템플릿 코드 삽입
2. Ctrl + F2 = Bookpoint 삽입
3. Ctrl + Shift + F2 = 다음 Bookpoint 지점으로 가기
4. Ctrl + c = Clean Project
5. Ctrl + h = 검색창 열기
5. Shift + Alt + r = Refactor -> Rename
"
디버깅 관련	"1. 시작 시에 main 함수에서 자동으로 멈추고 싶지 않은 경우 Debug configuration -> Debugger -> Stop on startup at 해제
"
git	"최초 설정
0. 로컬 저장소로 사용하고자 하는 디렉토리를 하나 만든다.

1. git init
 로컬 저장소에 해당하는 gitlab 폴더를 만든다. 

2. git clone <원격 저장소 주소> <디렉토리> : 원격 저장소의 파일을 다운로드 받아 복사본을 생성한다.
 ex) 원격 저장소 주소는 
     SSH인 경우, git@dage2.artik.io:Artik_NW/api_wifi.git
     HTTP인 경우, http://dage2.artik.io:81/Artik_NW/api_wifi.git
 - 이후 작업은 해당 디렉토리(로컬 저장소)로 이동해서 해야 함.

3. git config : 사용자 이름과 메일 주소를 등록한다.
git config --global user.name ""Myunghoon Ahn""
git config --global user.mail ""myunghoon.ahn@samsung.com""
 * 등록 내용 확인 = git config --global --list

4. git branch -a : 브랜치의 목록을 확인
* master -> 로컬 브랜치를 의미함.
  remotes/origin/HEAD -> origin/master -> HEAD의 현재 위치는 origin/master 임을 의미함.
  remotes/origin/master -> 최종 원격 저장소
  remotes/upstream/master -> 나의 원격 저장소
"
	"1. 키 생성
ssh-keygen 실행하고(password 입력 필요 없음, 파라미터 필요 없음)
~/.ssh/ 경로에 가서 아래 공개키 연 다음 해당 키를 github에 추가한다.
cat id_rsa.pub

2. SSH로 서버(GitHub) 접근 확인
ssh -T git@github.com

3. ssh 로 원격 저장소 이름 추가(원격 저장소의 위치는 origin이랑 같고 이름만 다른 것임.)
git remote add <원격 저장소 이름> <주소>
git remote add linuxapi git@github.com:ahnmh/linuxapi.git

4. 원격 저장소 확인
git remote -v
ahnmh@ahnmh-hp:~/workspace/linuxapi$ git remote -v
linuxapi git@github.com:ahnmh/linuxapi.git (fetch)
linuxapi git@github.com:ahnmh/linuxapi.git (push)
origin https://github.com/ahnmh/linuxapi.git (fetch)
origin https://github.com/ahnmh/linuxapi.git (push)

5. 이제 linuxapi 이름으로 push 할 수 있고 이 때 ssh 방식이기 때문에 id / pwd 확인 절차가 없어짐.
git push linuxapi master
"
	"소스 내려받기
1. git fetch <원격 저장소> : 원격 저장소로부터 브랜치를 가져옴. 기본 원격 저장소는 origin
git fetch origin

2. git diff <원래 브랜치> <비교 대상 브랜치> : 병합 이전에 변경 사항을 비교해본다.

3. git merge <원격 저장소 브랜치> : 원격 저장소로부터 가져온 브랜치를 병합 시도한다.
git merge origin/master
 * Coflict가 발생하면 merge에 실패한다. 이 경우 수동으로 Conflict 항목을 수정해야 한다.

4. git pull <원격 저장소> <원격 저장소 브랜치> : fetch와 merge를 동시에 수행한다.
git pull origin master

5. git add <파일 이름> : 충돌 해결 후 Conflict 난 항목을 병합한다.

 * 로컬에 있는 모든 변경 내용과 확정본을 포기하려면, 아래 명령으로 원격 저장소의 최신 이력을 가져오고, 
   로컬 master 브랜치가 가져온 이력을 가리키도록 할 수 있다.
   git fetch origin
   git reset --hard origin/master
"
	"소스 올리기
1. git status : 변경된 파일 확인

2. git diff : 변경된 내용 확인

3. git add . : commit에서 -a와 같은 의미이며 변경된 파일을 추가한다는 의미임.

4. git commit -m '변경 내용 간략하게 작성' : 변경 사항을 확정한다.
 * 구조
   [Working Directory : 내가 변경한 실제 파일] --add--> [Index : 등록 준비 영역] --commit--> [HEAD : 최종 작성본]

5. git push <원격 저장소> <원격 저장소 브랜치> : 로컬 저장소의 내용을 원격 저장소로 올린다.
 ex) git push upstream master
 * 내가 끌어온 저장소가 최신 버전이 아닌 경우, 즉 내가 pull 을 실행한 후 다른 사람이 push 를 하여 
   원격 저장소를 업데이트 해버린 경우에는 내 push 요청이 Reject된다.
   이런 경우 merge 작업을 진행하여 다른 사람의 업데이트 이력을 내 저장소에도 갱신 해야한다.
 * 즉, push 명령이 reject되면 원격 저장소의 변경 사항이 로컬 저장소에 제대로 반영되지 않은 것이므로 git pull 혹은 
   git fetch/git merge 로 변경 사항을 로컬 저장소 파일에 머지한 소스 베이스로 코드 수정하여 재시도.
 * 충돌이 난 파일을 편집기로 열어보면 아래 그림처럼 표시된다.
  <<<<<<< HEAD
  로컬 저장소 내용
  =======
  원격 저장소 내용
  >>>>>>> 17c860612953c0f9d88.....
  : 해당 부분을 모두 원격 저장소 내용대로 수정해야 함.

6. git log -1 : 최근 변경 사항을 확인

7.GitLab 사이트 방문하여 변경 사항 내용을 확인한 후에 Merge Request를 시도한다.
 *내가 작업하는 원격 저장소 위치가 origin이 아니기 때문.
 Source branch = ahnmh/api_wifi - master
 Target branch = Artik_NW/api_wifi - master
"
	"기타
1. git log --graph --oneline : 변경 이력 흐름을 선으로 된 그림으로 보기

2. gtk : 변경 이력을 GUI 툴로 보여준다.
"
네트워크 동작 관련	"1. iwconfig를 통해 무선랜 인터페이스를 알아낸다.
 - 또는 nmcli device status(NetworkManager가 실행중이지 않으면 안먹음)

2. 구해진 인터페이스가 wlan0라고 하면
ifconfig wlan0 up

3. iwlist wlan0 scanning 을 통해 스캔 동작 확인

4. wpa_supplicant 실행
NetworkManager가 실행중인 경우 종료한다.
service NetworkManager stop
chkconfig NetworkManager off

5. wpa_supplicant를 실행한다.
service wpa_supplicant start
chkconfig wpa_supplicant on
"
ctags	"1. ctags는 프로그래밍 소스 코드의 태그 (전역변수 선언, 함수 정의, 매크로 선언)들의 데이터베이스(tags파일)를 생성하는 명령어

2. 분석할 Source가 있는 디렉터리로 이동 후 터미널 상에 명령어를 입력하여 tags 파일을 생성 한다
 - ctags -R

3. 현재 tags가 있는 디렉토리 외에 다른 디렉토리에서 실행 하면 적용되지 않는다. 이를 극복 하기 위하여 vimrc파일에 tags 파일을 등록한다.
 - .vimrc에 set tags +=tags파일 위치/tags 추가

4. 사용 방법
분석을 원하는 Source파일을 Vim으로 Open한다.
커서를 mm_struct로 이동한후 ctrl + ] 를 입력하면, tags 파일에서 해당 태그 정보를 찾아 해당 파일로 이동함.
ctrl + ] -> 커서가 위치하고 있는 함수나 구조체의 정의로 이동
ctrl + t -> 이전 위치로 돌아오기
:ta [name] -> name과 일치하는 태그 위치로 이동
:ts [name] -> name과 일치하는 태그 목록 출력
:ta /[name]-> name과 일치하는 태그 목록 출력
:tj [name] -> 목록이 한개인 경우 이동, 여러개인 경우 목록 출력
:tn -> 다음 태그로 이동 (tag next)
:tp -> 이전 태그로 이동 (tag previous)
:tags -> 이동한 태그 히스토리 목록 출력

5. 코드가 수정되서 심볼이 추가되면, tags 파일을 새로 만들어야(ctags -R) vi에서 해당 심볼을 찾을 수 있다.
 
"
프록시 서버 설정	"$ export http_proxy=<address>:<port>
$ export https_proxy=<address>:<port>
 -> .bashrc 또는 .profile에 저장
"
