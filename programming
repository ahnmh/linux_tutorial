컴파일	"gcc -c test.c
 test.c가 컴파일되어 오브젝트 파일 test.o가 생성된다.
"
빌드	"gcc -o test test.o
 test.o가 빌드되어 실행파일 test가 생성된다.

디버깅 심볼 포함 코드 최적화 Disable. 이렇게 해야 gdb로 디버깅이 가능하다.
 gcc -g -O0 test.c -o test
"
실행	"./test
"
분리된 소스코드 컴파일 & 빌드	"test.c / func.h, func.c로 코드가 분리되어 있으면,
gcc -c test.c func.c로 오브젝트 파일 test.o, func.o를 생성한다.

gcc -o test test.o func.o로 실행파일 test를 생성함.
"
make	"명령어 집합을 묶고 한번에 실행할 수 있게 해준다.
명령어 집합을 하나의 이름으로 지정하여 make 명령어의 인자로 사용한다.

all: test1 test2

test1: test.o func.o
         gcc -o test test.o func.o

test.o: test.c
         gcc -c test.c

func.o: func.c
         gcc -c func.c
"
	"test2: test2.o func2.o
         gcc -o test2 test2.o func2.o

test2.o: test2.c
         gcc -c test2.c

func2.o: func2.c
         gcc -c func2.c
"
	"clean:
         rm -f test1 test.o func.o
         rm -f test2 test2.o func2.o
 
"
	"위와 같이 make를 구성했을 때,
make test1을 실행하면 test1에 해당하는 명령어 집합인 test.o와 func.o가 실행됨.
make test2를 실행하면 test2에 해당하는 명령어 집합인 test2.o와 func2.o가 실행됨.
clean을 실행하면 rm 명령에 따라 빌드 이후에 결과물이 삭제된다.
make all을 실행하면 test1, test2 명령어 집합이 모두 실행된다.
"
"make 추가 명령어 - 
매크로"	"CC = gcc 와 같이 선언하면, 일종의 매크로로서,
$(CC)와 같이 치환하여 사용할 수 있다.

CC = gcc -c
CO = gcc -o

test2: test2.o func2.o
         $(CO) test2 test2.o func2.o

test2.o: test2.c
         $(CC) test2.c
"
"make 추가 명령어 - 
@"	"명령문을 보이지 않게 함.
test2: test2.o func2.o
         @$(CO) test2 test2.o func2.o
"
make 추가 명령어 - echo	"메시지를 출력함.
test2: test2.o func2.o
         echo build test2
         @$(CO) test2 test2.o func2.o
"
make 추가 명령어 - #	"주석 처리
test2: test2.o func2.o
         echo build test2 #build test.
         @$(CO) test2 test2.o func2.o
"
glib 설치 및 코드 빌드	"설치
sudo apt-get install libglib2.0

Glibconfig.h not found
sudo cp /usr/lib/x86_64-linux-gnu/glib-2.0/include glibconfig.h /usr/include/glib-2.0

이클립스 프로젝트 설정
Properties -> C/C++ General -> Paths and Symbols
Includes에 
 /usr/include/glib-2.0
 /usr/lib/x86-x64-linux-gnu/glib2-2.0/include 추가
Library에
 glib-2.0 추가

아래와 같이 코드 작성 후,
#include <glib.h>
int main() {
 GMainLoop* loop = NULL;
 GMainContext* context = NULL;
 GSource* src = NULL; ...
이후에 변수들의 타입을 알 수 없다고 뜨는 경우,
 Clean Project한 후,
 프로젝트 마우스 우클릭 -> index -> Rebuild를 실행해줌.
"
dbus 서비스 등록	"1. 서비스 파일 작성(root 권한으로 작성해야 함)
- sudo vi es.aleksander.Alarm.service
- 내용
[D-BUS Service]
Name=es.aleksander.Alarm
Exec=/usr/bin/<executable>
 - 위치
/usr/share/dbus-1/services/es.aleksander.Alarm.service ; 세션 버스의 위치이다.

2. dbus-send : 동작을 확인하는 명령
dbus-send --session --print-reply --dest=es.aleksander.Alarm /es/aleksander/Alarm es.aleksander.Alarm.Configure uint32:10

3. 관련 프로그램
 - d-feet
 : session, system dbus에 등록된 인터페이스를 확인하고 테스트해볼 수 있는 툴(설치 필요함)
 - dbus-monitor --session
 : 오고가는 dbus 메시지를 모니터링 가능 하다
 : dbus 메시지 필터링 가능 
   $dbus-monitor ""type=signal,sender='org.gnome.TypingMonitor',interface='org.gnome.TypingMonitor'""

* GIO manual
https://developer.gnome.org/gio/stable/

* GDBUS sample
https://github.com/bratsche/glib/tree/master/gio/tests
"
서비스 등록	"1. 셸스크립트를 작성한다.
#!/bin/bash

PATH=/sbin:/bin:/usr/sbin:/usr/bin

start() {
    Hello
}

stop() {
    sudo killall -9 Hello
}

case $1 in
     start|stop) $1;;
     restart) stop; start;;
      *) echo ""Run as $0 ""; exit 1;;
esac

2. 스크립트 파일을 /etc/init.d/에 복사
sudo cp hello /etc/init.d/
3. 실행가능한 파일로 변경
sudo chmod 755 /etc/init.d/hello
4. 서비스 등록
sudo update-rc.d  hello defaults
5. 서비스 시작
service hello start
6. 서비스 중지
service hello stop
7. 서비스 삭제
sudo update-rc.d -f hello remove
"
pkg-config	"라이브러리를 설치한 후 Include와 Library 패스를 알려주는 고마운 툴.

1. 전체 리스트 보기
pkg-config --list-all

2. glib이라는 문자열을 포함하는 리스트 보기
pkg-config  --list-all | grep glib
gio-unix-2.0                   GIO unix specific APIs - unix specific headers for glib I/O library
dbus-glib-1                    dbus-glib - GLib integration for the free desktop message bus
gio-2.0                        GIO - glib I/O library
glib-2.0                       GLib - C Utility Library

3. Include 패스 얻기
pkg-config --cflags glib-2.0
-I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include 
pkg-config --cflags gio-2.0
-pthread -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include  

4. Library 이름 얻기
pkg-config --libs glib-2.0
-lglib-2.0  
pkg-config --libs gio-2.0
-lgio-2.0 -lgobject-2.0 -lglib-2.0

또한 아래와 같이 Make 파일 안에서 사용할 수도 있다.
$ gcc test.c `pkg-config --cflags --libs artik-systemio artik-network artik-connectivity`

"
	5. 이후 이클립스에 아래와 같이 적용한다.
실행 파일에서 사용하는 라이브러리 확인	"ldd <실행 파일>
 : 라이브러리 이름 => 라이브러리 경로 의 순으로 전체 라이브러리 파일을 표시해줌.
"
라이브러리 경로 추가	"/etc/ld.so.conf 파일에 참조하고자 하는 위치를 추가하면 된다.
이 파일은 현재 
include /etc/ld.so.conf.d/*.conf 로서 전체 라이브러리 경로를 참조하고 있음.
"
objdump	"objdump -<옵션> <오브젝트 파일>
오브젝트 파일의 다양한 정보(디버깅 정보 포함)를 출력해준다.
"
ELF 파일 형식	"ELF (Executable and Linkable Format)는 실행 파일, 목적 파일, 공유 라이브러리 그리고 코어 덤프를 위한 표준 파일 형식이다. 1999년 86open 프로젝트에 의해 x86 기반 유닉스, 유닉스 계열 시스템들의 표준 바이너리 파일 형식으로 선택되었다.
윈도우의 PE와 같은 의미로 보임.

readelf -r <실행/라이브러리/오브젝트 파일>
실행/라이브러리/오브젝트 파일 내부에 재배치 가능한 항목을 알수 있음.(호출하는 함수 내역)
Relocation section '.rel.dyn' at offset 0x520 contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
 08049a3c  00001806 R_386_GLOB_DAT    00000000   __gmon_start__
 08049a78  00001405 R_386_COPY        08049a78   stdin

Relocation section '.rel.plt' at offset 0x530 contains 8 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
 08049a4c  00000207 R_386_JUMP_SLOT   00000000   dlsym
 08049a50  00000607 R_386_JUMP_SLOT   00000000   fgets
 08049a54  00000b07 R_386_JUMP_SLOT   00000000   dlerror
 08049a58  00000c07 R_386_JUMP_SLOT   00000000   __libc_start_main
 08049a5c  00000e07 R_386_JUMP_SLOT   00000000   printf
...
"
동적 라이브러리 로딩	"윈도우에서 명시적 DLL 로딩에 해당한다.
 - #include <dlfcn.h>
 - 호출하고자 하는 동적 라이브러리에서 제공하는 함수 원형을 정의한다.
 Ex) int (*func)(int, int)
 - dlopen 함수를 호출해서 참조하고자 하는 Shared object의 경로를 넘겨주어 핸들값(void*)을 리턴으로 받는다.
 - dlsym 함수를 호출해서 해당 핸들이 가르키는 Shared object의 심볼(예를 들어 함수) 주소를 얻는다.
 - 해당 함수를 호출할 수 있다.
 - 함수 호출 이후, dlclose(핸들)로 닫는다.
 - 에러는 dlerror()로 리턴받을 수 있다.
 - dl 라이브러리를 로드해야 함.
 Ex) gcc .... ldl
"
Compilation path	"cygwin 프로젝트인 경우 이클립스의 GDB가 소스 패스를 찾을 수 없다고 나오는데, 
Compilation path에 \cygdrive\c 라는 문자열이 포함되어서 그렇다.

Window -> Preference -> C/C++ -> Debug -> Source Lookup Path 에 가서
Add -> Path Mapping 하여 \cygdrive\c 을 C:\로 매핑한다.
Add -> Project - Path Relative to Source Folders 가 없으면 추가한다.
Add -> Compilation Directory를 해당 프로젝트의 디렉토리로 지정해서 추가한다.
"
