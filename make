
<목표 파일>: <필수 조건 파일1> <필수 조건 파일2>

$@ : 확장자가 없는 현재 목표 파일의 이름(Target)
$* : 확장자를 제외한 현재 목표파일의 이름
$< : 현재 필수 조건 파일 중 첫번째 파일 이름(열거된 Depend중에 가장 왼쪽에 기술된 1개의 Depend)
$? : 현재 대상보다 최근에 변경된 필수 조건 파일 이름
$^ : 현재 모든 필수 조건 파일들
-f : 일반 파일을 make 파일로 사용함.

-Wall : 모든 모호한 코드에 대한 경고 메시지를 보여줌.

.c.o : 위의 기술은 확장자 ".c"를 가진 파일을 확장자 ".o"를 가진 파일로 생성하는 공통적인 확장자 규칙

.PHONY <Target> : .PHONY"에 명시된 Depend 는 모두 가짜 Target. 실제로 파일을 만들지 않음. 예를 들면 clean, all

all : <Target> 을 맨 앞에 써야 한다.
 가장 처음 나오는 Target은 "make <target>" 에서 <target>을 생략해도 무관하기 때문.


clean: 
         -$(RM) test.o test 
	명령 앞에 대쉬(-) 문자는 rm명령어에서 에러를 반환하는 경우 무시하고 계속 진행하게 한다. 
	include도 앞에 -include 를 써서 없는 경우 무시하도록 한다.


MAKEFLAGS : make 명령어의 인수를 담고 있는 변수입니다

-C : Change directory
$(MAKE) -C ../src all -> 상위 폴더 src에 있는 Make all 을 수행하라

정적 라이브러리 만들기
ar r <*.a> <*.o>

ranlib
정적 라이브러리를 성공적으로 사용하기 위해서 일부 시스템, 특히 버클리(Berkeley) 유닉스로부터 파생된 시스템에서는 라이브러리 목차를 만들 필요가 있는데, 
이를 위해 ranlib을 사용한다. 리눅스와 같이 GNU 소프트웨어 개발 도구를 사용할 때에는 이러한 것이 필요하지 않으며 또한 실행한다 하더라도 문제가 없다. 


cc -o program program.o -L. -lfoo
-L. 옵션은 컴파일러엑 라이브러리를 현재 디렉토리에서 찾도록 지시한다. 
-lfoo 옵션은 컴파일러에게 libfoo.a라는 라이브러리를 사용하도록 지시하고, 공유라이브러리인 libfoo.so가 존재한다면 이것을 사용하게 한다.


nm
오브젝트 파일, 라이브러리, 실행 프로그램에 어떤 함수들이 포함되는지 살펴보기 위해서는 nm 명령을 사용할 수 있다. 

nm program
 nm libfoo.a

 -I : 인클루드 패스(.h) 지정
 -L : 라이브러리 파일 패스 지정

-fmessage-length=0 : format error messages각 한줄씩 표시되도록 함.

-MMD :*.d 파일을 생성하는 명령. 
타겟을 컴파일하는데 필요한 헤더파일의 정보(종속성)를 포함하는 파일(디펜던시 리스트 파일)을 생성한다. 
타겟의 헤더파일이 변경되면 *.d 파일이 수정되고 타겟이 리빌드 된다.


-ON(N = 0 ~ 3) : 최적화 레벨. 일반적으로 2, 디버깅 시 0
-Os : 사이즈 최적화 수행. 임베디드 시스템에서 주로 사용.

-g : 디버깅 레벨
gdb에게 제공하는 정보를 바이너리에 삽입한다.
기본적으로 -g = -g2
-g0 : 디버깅 정보를 삽입하지 않음
-g3 : 디버깅 정보를 가장 많이 제공

-l<라이브러리 이름> : 같이 링크할 라이브러리를 지정
라이브러리 이름앞의 lib을 떼고 확장자 이전까지를 라이브러리 이름으로 취급. (libtest.so => -ltest)
반드시 컴파일 명령에서 소스 파일의 뒤에 와야한다.
예) gcc -o test test.c -L/opt/lib -ltest
라이브러리를 main 보다 앞에 링크하면 undefined 참조 오류 발생.
그리고 라이브러리 내에 main 함수가 있다면 실행파일의 main 함수가 실행되지 않고 라이브러리 내의 main이 실행되버릴 수 있다.

-shared : 공유라이브러리와 정적라이브러리가 같이 있을 경우 공유 라이브러리를 우선하여 링크
(아무 옵션을 주지않아도 공유 라이브러리 링크가 우선함)

-static : 정적 라이브러리를 우선하여 링크
